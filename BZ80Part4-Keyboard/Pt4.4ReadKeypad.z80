;Pt4.4ReadKeypad.z80
;Scans the keypad for presses and outputs the row number in decimal and
;the column in decimal.

;Constants
lcd_command equ $00     ;LCD command I/O port
lcd_data equ $01        ;LCD data I/O port
keyboard_port equ $20   ;Keyboard in and out port
    
org 0

;---------LCD Initialisation
    ld hl,commands      ;Address of command list, $ff terminated
    
command_loop:
lcd_wait_loop1:         ;Loop back here if LCD is busy
    in a,(lcd_command)  ;Read the status into A
    rlca                ;Rotate A left, bit 7 moves into the carry flag
    jr c,lcd_wait_loop1 ;Loop back if the carry flag is set

    ld a,(hl)           ;Next command
    inc a               ;Add 1 so we can test for $ff...
    jr z,command_end    ;...by testing for zero
    dec a               ;Restore the actual value
    out (lcd_command),a ;Output it.
    
    inc hl              ;Next command
    jr command_loop     ;Repeat

command_end:       
;--------Welcome Message         
    ld hl,message       ;Message address (ASCIIZ)
message_loop:           ;Loop back here for next character
lcd_wait_loop2:         ;Loop back here if LCD is busy
    in a,(lcd_command)  ;Read the status into A
    rlca                ;Rotate A left, bit 7 moves into the carry flag
    jr c,lcd_wait_loop2 ;Loop back if the carry flag is set

    ld a,(hl)           ;Load character into A
    and a               ;Test for end of string (A=0)
    jr z,init_done

    out (lcd_data),a    ;Output the character
    inc hl              ;Point to next character (INC=increment, or add 1, to HL)
    jr message_loop     ;Loop back for next character

init_done:
keyboard_scan:
    ld c,keyboard_port  ;Port address
    ld a,1              ;Row to scan
    ld d,0              ;Row index
keyboard_loop:          ;Loop for each row
    out (c),a           ;Output row
    in e,(c)            ;Read columns
    jr nz,key_found     ;If non-zero then a key is being pressed
    
    inc d               ;Next index
    rlca                ;Next row
    jr nc,keyboard_loop ;Loop until the bit falls out

                        ;End of scan loop - nothing pressed
    jr keyboard_scan    ;Loop infinitely (because this is a test)

key_found:              ;We found a pressed key
                        ;Print row index (decimal) and column (binary)
    ;A=Row bit
    ;D=Row index
    ;E=Returned column
    xor a               ;A=0 (index counter)
column_index_loop:
    rr e                ;Rotate E right until we find the bit which is set
    jr c,column_index_done
    inc a               ;Otherwise, inc index and loop again
    jr column_index_loop
    
column_index_done:
    ;A=Column index
    ;D=Row index
    ;Calculate key number (index into look up table)
    ;We'll end up with a value, in A, 0000ccrr where cc is the column index
    ;and rr is the row index.
    ld e,a              ;Save column into E
    
    ld a,-4             ;Our keypad only uses the low 4 bits of the row
    add a,d             ;address so we need to subtract 4 from the index.
                        ;We do this by adding -4 to keep the code shorter.
                        ;We could simplify this with known specific hardware.
                        
    add a,a             ;Shift column left 2 bits. Adding a number to itself
    add a,a             ;is the same as a left shift but ADD A,A is faster on Z80.
    
    add a,e             ;Add on row. A = final key value.
    
;Lookup the key value in the table
    ld e,a              ;Pop into E for outputting
    
    ;Lookup character in lookup table
    ld hl,keypad_lut    ;Table address
    ld c,a              ;Char offset in BC
    ld b,0
    add hl,bc
    ld l,(hl)           ;Key in L, saved for later

;;Key reading done. Output/display stuff from here on down.
    ;Key number in A. We want to output it in hex,
    ;so convert nybbles to chars in D and E.
    ;Output it in Hex
    ld e,a              ;Preserve value
    rrca                ;Move first digit from high nybble to low nybble
    rrca
    rrca
    rrca
    and $f              ;Mask out unwanted bits
    add a,'0'           ;Turn it into an ASCII char
    cp ':'              ;If > 9...
    jr c,digit1_done
    add a,'a'-':'       ;...convert to letter
digit1_done:
    ld d,a              ;Move to D for outputting
    
    ;Output key number (E)
    ld a,e              ;Original value back
    and $f              ;As above
    add a,'0'
    cp ':'
    jr c,digit2_done
    add a,'a'-':'
digit2_done
    ld e,a              ;Move to E for outputting
    
;Now to do the actual displaying.
    
    ;Hex byte in ASCII form in DE
lcd_wait_loop3:         ;LCD busy wait
    in a,(lcd_command)
    rlca
    jr c,lcd_wait_loop3

    ld b,$80+$40        ;*****Position cursor command
    ld c,lcd_command    ;LCD command port
    out (c),b           ;Position LCD cursor
    
lcd_wait_loop4:         ;LCD busy wait
    in a,(lcd_command)
    rlca
    jr c,lcd_wait_loop4

    ld c,lcd_data       ;LCD data port
    out (c),d           ;*****Output high nybble (hex)

lcd_wait_loop6:         ;LCD busy wait
    in a,(lcd_command)
    rlca
    jr c,lcd_wait_loop6

    ld c,lcd_data       ;LCD data port
    out (c),e           ;*****Output low nybble (hex)
 
lcd_wait_loop5:         ;LCD busy wait
    in a,(lcd_command)
    rlca
    jr c,lcd_wait_loop5
    
    ld a,' '            ;*****Output a spacer
    out (lcd_data),a
    
lcd_wait_loop7:         ;LCD busy wait
    in a,(lcd_command)
    rlca
    jr c,lcd_wait_loop7

    ld c,lcd_data       ;LCD command port
    out (c),l           ;*****Output the character

    jr keyboard_scan    ;Loop infinitely
    
    
;Startup command sequence:
;$3f: Function set: 8-bit interface, 2-line, small font
;$0f: Display on, cursor on (I find turning the cursor on is very helpful when debugging)
;$01: Clear display
;$06: Entry mode: left to right, no shift
commands:               ;$ff terminated
    db $3f,$0f,$01,$06,$ff
    
message:
    db "Press a key",0

keypad_lut:
    db "D#0*C987B654A321"
